@using System;
@using Sandbox.UI;

@namespace Facepunch.UI
@inherits Panel

@attribute [StyleSheet]

<root class="hidden flex absolute inset-0 align-center justify-center background">
    <table class="with-background with-padding-lg layout">
        <div class="title">
            <label class="important uppercase left">@(Status is null ? Name : $"{Name} - {Status}")</label>
            <label class="important uppercase center">@(RoundNumber is { } roundNumber && RoundLimit is { } roundLimit ? $"Round {roundNumber} of {roundLimit}" : "")</label>
            <label class="important uppercase right">@(Time?.ToString( @"m\:ss" ) ?? " ")</label>
        </div>

        @for ( int i = 0; i < GroupedPlayers.Count(); i++ )
        {
             var group = GroupedPlayers[i];

            @if ( group.Key == Team.Unassigned )
            {
                <div class="flex gap-sm align-center">
                    <Icon file="/ui/teams/spectator.png" size="16" />
                    <label class="small grey">string.Join(", ", group.Select(x => x.DisplayName)</label>
                </div>
            }
            else
            {
                <span class="flex align-center space-between gap-sm" style="color: @group.Key.GetColor().Hex">
                    <span class="flex align-center gap-sm">
                        <Icon file="@group.Key.GetIconPath()" size="24" />
                        <label class="emphasis with-py">@group.Key.GetName()</label>
                    </span>

                    <separator style="background-color: @group.Key.GetColor().Hex" />

                    @if ( GameMode.Instance.Get<TeamScoring>() is { } scoring )
                    {
                        <label class="emphasis">@scoring.GetFormattedScore(group.Key)</label>
		            }
                </span>

                <div class="row header with-px-lg with-py-sm">
                    <label class="col stat-small small"></label>
                    <label class="col stat-small small"></label>
                    <label class="col playername small"></label>
                   
                    @foreach ( var x in IScore.Find( Client.Local ) )
                    {
                        <label class="col stat">@(x.Attribute.Name)</label>
                    }
                </div>

                @foreach ( var player in group )
                {
                    <ScoreboardRow Client="@player" />
                }

                @if ( i == 0 )
                {
                    <GameOverview />
                }
            }
        }
    </table>
</root>

@code
{
    public string Status => GameMode.Instance?.DisplayedStatus;
    public string Name => GameMode.Instance?.Title;
    public TimeSpan? Time => GameMode.Instance?.DisplayedTime;

    public int? RoundNumber => GameMode.Instance.Get<RoundCounter>()?.Round;
    public int? RoundLimit => GameMode.Instance.Get<RoundLimit>()?.MaxRounds;

    public IEnumerable<Client> Clients => GameUtils.AllPlayers;

    private List<IGrouping<Team, Client>> GroupedPlayers
    {
        get
        {
            var sortedPlayers = Clients.OrderByDescending( x => x.GetComponent<PlayerScore>().Score );
            var groupedPlayers = sortedPlayers.GroupBy( x => x.Team );
            return groupedPlayers.ToList();
        }
    }

    public bool IsActive { get; set; }

    protected override int BuildHash()
    {
        if ( !IsActive ) return 0;

        var hash = new HashCode();

        hash.Add( IsActive );
        hash.Add( Status );
        hash.Add( Time?.TotalSeconds );
        hash.Add( RoundNumber );
        hash.Add( RoundLimit );

        foreach ( var team in GroupedPlayers )
        {
            hash.Add( team.Key );

            foreach ( var player in team )
            {
                hash.Add( player.Id );
            }
        }

        return hash.ToHashCode();
    }

    public override void Tick()
    {
        if ( Input.Pressed( "Score" ) )
        {
            IsActive = Input.Pressed( "Score" );
            SetClass( "visible", true );
        }

        if ( Input.Released( "Score" ) )
        {
            SetClass( "visible", false );
            IsActive = false;
        }
    }
}
